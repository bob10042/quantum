param(
    [string]$Query,
    [string]$OutputFile = "research_results.md",
    [switch]$UseAI,
    [string]$MaxResults = 10
)

Write-Host "========================================" -ForegroundColor Cyan
Write-Host "Online Research Agent" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

if ([string]::IsNullOrEmpty($Query)) {
    Write-Host "ERROR: Research query is required!" -ForegroundColor Red
    Write-Host ""
    Write-Host "Usage:" -ForegroundColor Yellow
    Write-Host '  .\research_agent.ps1 -Query "quantum consciousness theories"' -ForegroundColor White
    Write-Host '  .\research_agent.ps1 -Query "latest physics research 2025" -OutputFile physics.md' -ForegroundColor White
    Write-Host ""
    exit 1
}

Write-Host "Research Query: $Query" -ForegroundColor Green
Write-Host "Output File: $OutputFile" -ForegroundColor Green
Write-Host ""

# Function to search DuckDuckGo (privacy-focused)
function Search-Web {
    param([string]$SearchQuery)
    
    Write-Host "Searching the web..." -ForegroundColor Yellow
    
    $encodedQuery = [System.Web.HttpUtility]::UrlEncode($SearchQuery)
    $searchUrl = "https://html.duckduckgo.com/html/?q=$encodedQuery"
    
    try {
        $response = Invoke-WebRequest -Uri $searchUrl -UseBasicParsing -UserAgent "Mozilla/5.0"
        
        # Parse results (simplified - looks for links)
        $links = $response.Links | Where-Object { 
            $_.href -match "^http" -and $_.innerText -ne ""
        } | Select-Object -First $MaxResults
        
        return $links
    } catch {
        Write-Host "Error searching: $($_.Exception.Message)" -ForegroundColor Red
        return @()
    }
}

# Function to fetch webpage content
function Get-WebPageContent {
    param([string]$Url)
    
    try {
        $response = Invoke-WebRequest -Uri $Url -UseBasicParsing -TimeoutSec 10
        return $response.Content
    } catch {
        Write-Host "  Could not fetch: $Url" -ForegroundColor Gray
        return $null
    }
}

# Function to search arXiv for academic papers
function Search-ArXiv {
    param([string]$SearchQuery)
    
    Write-Host "Searching arXiv for academic papers..." -ForegroundColor Yellow
    
    $encodedQuery = [System.Web.HttpUtility]::UrlEncode($SearchQuery)
    $arxivUrl = "http://export.arxiv.org/api/query?search_query=all:$encodedQuery&start=0&max_results=$MaxResults"
    
    try {
        [xml]$response = Invoke-WebRequest -Uri $arxivUrl -UseBasicParsing
        return $response.feed.entry
    } catch {
        Write-Host "Error searching arXiv: $($_.Exception.Message)" -ForegroundColor Red
        return @()
    }
}

# Load System.Web for URL encoding
Add-Type -AssemblyName System.Web

# Start research
Write-Host "Starting research..." -ForegroundColor Cyan
Write-Host ""

# Initialize results
$results = @()

# Search arXiv for academic papers
$arxivResults = Search-ArXiv -SearchQuery $Query

# Search general web
$webResults = Search-Web -SearchQuery $Query

# Generate report
$report = @"
# Research Report: $Query

**Generated:** $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

---

## Academic Papers (arXiv)

"@

if ($arxivResults.Count -gt 0) {
    foreach ($paper in $arxivResults) {
        $title = $paper.title -replace '\s+', ' '
        $summary = $paper.summary -replace '\s+', ' '
        $link = $paper.id
        $published = $paper.published
        
        $report += @"

### $title
- **Published:** $published
- **Link:** $link
- **Summary:** $summary

"@
    }
} else {
    $report += "`n*No arXiv papers found.*`n"
}

$report += @"

---

## Web Resources

"@

if ($webResults.Count -gt 0) {
    foreach ($link in $webResults) {
        $report += "- [$($link.innerText)]($($link.href))`n"
    }
} else {
    $report += "`n*No web results found.*`n"
}

$report += @"

---

## Next Steps

1. Review the papers and resources above
2. Download relevant papers from arXiv
3. Summarize key findings
4. Integrate with existing research

---

*Generated by Research Agent*
"@

# Save report
$report | Out-File -FilePath $OutputFile -Encoding UTF8

Write-Host ""
Write-Host "Research complete!" -ForegroundColor Green
Write-Host "Results saved to: $OutputFile" -ForegroundColor Cyan
Write-Host ""
Write-Host "Found:" -ForegroundColor Yellow
Write-Host "  - $($arxivResults.Count) academic papers" -ForegroundColor White
Write-Host "  - $($webResults.Count) web resources" -ForegroundColor White
Write-Host ""

# Open the results file
Write-Host "Opening results..." -ForegroundColor Cyan
Start-Process $OutputFile

Write-Host "========================================" -ForegroundColor Cyan
